#!/usr/bin/env python

import os
import re
import cgi
import sys
import os.path
from os.path import join as pjoin

import cgitb;

g_sConfPath = REPLACED_ON_BUILD


##############################################################################
# Browser identification for use before util modules are loaded, after they 
# are loaded util.webio.g_lNotDas2App is used.  If you update this list, *also*
# update the list is util.io

_g_BrowserAgent = ['firefox','explorer','chrome','safari']


DAYS="(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)"
MONTHS="(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"
TIME="\d\d:\d\d:\d\d"
PREFIX=re.compile("\[(%s %s [ \d]\d) (%s) (\d{4}) (\d+)\s+\d+\](.+)"%(DAYS,MONTHS,TIME))

#PREFIX=re.compile("\[(%s %s \d\d?) (%s) (\d{4}) (\d+) .+\](.+)"%(DAYS,MONTHS,TIME)); 

# handle output, python 2/3 compatible
try:
	unicode
except NameError:
	unicode = str

def pout(item):
	"""Write bytes or strings, in python 2 or 3
	If input item is bytes, write them, if item is a unicode string encode as
	utf-8 first"""
		
	if sys.version_info[0] == 2:
		if isinstance(item, unicode):
			sys.stdout.write(item.encode('utf-8'))
		else:
			sys.stdout.write(item)
	else:
		if isinstance(item, unicode):
			sys.stdout.buffer.write(item.encode('utf-8'))
		else:
			sys.stdout.buffer.write(item)

#pout("Content-Type: text/plain; charset=utf-8\r\n\r\n")

##############################################################################
# Cut down version of error handling for use before the module path is loaded

def preLoadError(sOut):
	"""Cut down error handling for use before the util modules are loaded,
	script must exit afte calling this or multiple HTTP headers will be 
	emitted.
	"""
	
	sType = 'InternalServerError'
	
	bClientIsBrowser = False
	if "HTTP_USER_AGENT" in os.environ:
		
		sAgent = os.environ['HTTP_USER_AGENT'].lower()
	
		for sTest in _g_BrowserAgent:
			if sAgent.find(sTest) != -1:
				bClientIsBrowser = True
				break	
	pout("Status: 500 Internal Server Error\r\n")
	
	if bClientIsBrowser:
		pout("Content-Type: text/plain; charset=utf-8\r\n\r\n")
		cgitb.enable(format='text')
		
		pout(sOut)
	else:
		pout("Content-Type: text/vnd.das2.das2stream\r\n\r\n")

		sOut = sOut.replace('\n', '\n\r').replace('"', "'")
		sOut = '<exception type="%s" message="%s" />\n'%(sType, sOut)
		xOut = sOut.encode('utf-8')
		pout("[00]%06d"%len(xOut))
		pout(xOut)



##############################################################################
# Update sys.path, boiler plate code that has to be re-included in each script
# since config file can change module path

def setModulePath(dConf):
	if 'MODULE_PATH' not in dConf:
		preLoadError(u"Set MODULE_PATH = /dir/containing/das2server_python_module")
		return False	
	
	lDirs = dConf['MODULE_PATH'].split(os.pathsep)
	for sDir in lDirs:
		if os.path.isdir(sDir):
				if sDir not in sys.path:
					sys.path.insert(0, sDir)
		
	return True


##############################################################################
# Entry point for script
##############################################################################
def main():
	form = cgi.FieldStorage()
	
	if 'type' in form:
		sType=form["type"].value
	else:
		sType="das2"
	
	#pout("Content-Type: text/plain; charset=utf-8\r\n\r\n")
	
	# Find out the log directory location
	dConf = getConf(g_sConfPath)
	if dConf == None:
		return 13
		
		
	# Set the system path
	if not setModulePath(dConf):
		return 18
		
	# Load the webutil module
	try:
		mTmp = __import__('das2server', globals(), locals(), ['webutil'], 0)
	except ImportError as e:
		preLoadError(u"Error importing module 'das2server'\r\n: %s"%(str(e)))
		return 19
	try:
		U = mTmp.webutil
	except AttributeError:
		preLoadError(u'No module named das2server.webutil under %s'%dConf['MODULE_PATH'])
		return 20
	
	if 'LOG_PATH' not in dConf:
		error(u"Can't locate das2 service log files, set the LOG_PATH "+\
		       u"value in %s."%(g_sConfPath))
		return 13

	
	sViewLogUrl = U.webio.getScriptUrl()
	sMainSrvUrl = 'server'
	if 'SERVER_URL' in dConf:
		sMainSrvUrl = dConf['SERVER_URL']

	# TODO: filter type content

	if "ip" in form:
		ip=form["ip"].value
	else:
		ip=os.environ["REMOTE_ADDR"]

	if 'action' in form:
		if form['action'].value == 'deleteAll':
			deleteAll(dConf['LOG_PATH'], sType,ip)
			
			if "ip" in form:
				sViewLogUrl += '?ip=' + ip
			pout('Status: 302\r\n')
			pout('Location: %s\r\n\r\n'%sViewLogUrl)
			return 0
			

	dRequests = {}
	lFiles = []
	for i in range(0,3):
		try:
			lFiles.append( pjoin(dConf['LOG_PATH'], "%s.%s_%d.log"%(sType, ip, i)) )
			processFile(lFiles[i], dRequests)
		except:
			pass
		
	dReplace = {
		'log-script':sViewLogUrl, 'main-script':sMainSrvUrl, 
		'server-sig':os.getenv('SERVER_SIGNATURE'),
		'files':lFiles
	}
	
	# Get replacement parameters for HTML text output
	if 'SITE_TITLE' in dConf:
		dReplace['site-id'] = dConf['SITE_TITLE']
	else:
		dReplace['site-id'] = "Set SITE_TITLE in %s"%dConf['__file__']

	if 'SERVER_ID' in dConf:
		dReplace['server-id'] = dConf['SERVER_ID'].upper()
	else:
		dReplace['server-id'] = "{Set SERVER_ID in %s}"%dConf['__file__']
	

	if 'STYLE_SHEET' in dConf:
		dReplace['css-link'] = "%s/static/%s"%(sMainSrvUrl, dConf['STYLE_SHEET'])
	else:
		dReplace['css-link'] = "%s/static/das2server.css"%sMainSrvUrl
		
	if 'CONTACT_EMAIL' in dConf:
		dReplace['contact-email'] = dConf['CONTACT_EMAIL']
	else:
		dReplace['contact-email'] = "update&#45;das2server&#46;conf&#64;nowhere&#45;ed&#117;"

	if 'CONTACT_url' in dConf:
		dReplace['contact-url'] = dConf['CONTACT_URL']
	else:
		dReplace['contact-url'] = "https://update-das2server.conf.nowhere.edu/~someone/"
	
	pout("Content-Type: text/html; charset=utf-8\r\n")
	pout("Cache-Control: no-cache\r\n\r\n")
	
	pout("""<!DOCTYPE html>
<html>
<head>
   <title>%(site-id)s</title>
   <link rel="stylesheet" type="text/css" media="screen" href="%(css-link)s" />
</head>
<body>
<div class="header">
	<div class="hdr_left">
		<img src="%(main-script)s/static/logo.png" alt="%(server-id)s" width="70" height="70" >
	</div> 
	<div class="hdr_center">
	%(server-id)s, a Das 3 Server
	<h1>%(site-id)s</h1>
	</div>
	<div class="hdr_right">
		<a href="http://das2.org">
		<img src="%(main-script)s/static/das2logo_rv.png" alt="Das2" width="80" height="80">
		</a>
	</div>
	<br> <br>
</div>
"""%dReplace)
		
	
	pout('<div class="navlinks"> &nbsp; <b>Actions:</b>')
	pout('  <a href="%(main-script)s">%(server-id)s top</a>'%dReplace)
	for k in sorted(dRequests.keys(), key=lambda s: s[3:]):
		pout('<a href="#%s">View %s</a>'%(k,k))
	pout('<a class="caution" href="?action=deleteAll">Delete All</a>')
	pout('</div>')
	
	if len(dRequests.keys()) > 0:
		for key in sorted(dRequests.keys(), key=lambda s: s[3:]):
			oneDay(ip,key,dRequests[key])
	else:
		pout('''
	<div class="day">
		<div class="dayheader">
		  Request logs are empty for type %(type)s and IP %(ip)s, checked:
		  <pre>
'''%{'ip':ip, 'type':sType})
		for i in range(0,3):
			pout("%s\n"%os.path.basename(lFiles[i]))

		pout('''
</pre>
	   </div>
	</div>
''')
	
		
	pout("""
<div class="footer">
  	<address>
		<a href="%(contact-url)s"> %(contact-email)s </a> 
	</address>
  <div>More information about das2 can be found at:
  <a href="http://das2.org/">http://das2.org/</a>.</div>
  <div>%(server-sig)s</div>
</div>"""%dReplace)

	pout("""
</body>
</html>
"""%dReplace)
	
	return 0

##############################################################################
# gather configuration data 
##############################################################################
def error(sText):
	pout("Content-Type: text/plain; charset=utf-8\r\n\r\n")
	pout(sText)
	

def getConf(sConfFile):
	"""Simple config file reader, maybe too simple
	"""
	
	if not os.path.isfile(sConfFile):
		if os.path.isfile(sConfFile + ".example"):
			error(u"Move\n     %s.example\nto\n     %s\nto enable your site"%(
			      sConfFile, sConfFile))
		else:
			error(u"%s is missing\n"%sConfFile)
			
		return None

	fIn = open(sConfFile, 'r')
	
	dConf = {}
	nLine = 0
	for sLine in fIn:
		nLine += 1
		
		# Really need to covert to a reg-ex parser, but this will do in the
		# short term.  Remove any text after a # character only if it occurs
		# before any '=' characters 
		
		iComment = sLine.find('#')
		iEquals = sLine.find('=')
		
		if (iComment > -1) and ((iEquals == -1) or (iEquals > iComment)):
			sLine = sLine[:iComment]
	
		sLine = sLine.strip()
		if len(sLine) == 0:
			continue
		
		iEquals = sLine.find('=')
		if iEquals < 1 or iEquals > len(sLine) - 2:
			error(u"Error in %s line %d"%(sConfFile, nLine))
			fIn.close()
			return None
		
		sKey = sLine[:iEquals].strip()
		sVal = sLine[iEquals + 1:].strip(' \t\v\r\n\'"')
		dConf[sKey] = sVal

	
	fIn.close()
	return dConf


##############################################################################
# Read one file
##############################################################################
def deleteAll(sLogDir, sType,ip):
	files=[
		pjoin(sLogDir, '%s.%s_0.log'%(sType,ip)),
		pjoin(sLogDir, '%s.%s_1.log'%(sType,ip)),
		pjoin(sLogDir, '%s.%s_2.log'%(sType,ip)),
	]
	
	fOut = open("%s/das2.%s_loghndlr.log"%(sLogDir, ip), "w")
	fOut.write("Removing %s"%files)
	fOut.close()

	for f in files:
		if os.path.exists(f):
			os.remove(f)

##############################################################################
# Read one file
##############################################################################
def processFile(sFile, dRequests):
	fd = open(sFile, "r")
	#pout('<p>Opened %s\n</p><pre>'%sFile)
	for line in fd:
		#pout(line)
		m = PREFIX.match(line)
		if m == None:
			#pout('>>>>no match\n')
			continue
		#pout('>>>match\n')

		key1 = "%s %s"%(m.group(1),m.group(3))
		key2 = "%s %s"%(m.group(2),m.group(4))
		if key1 in dRequests:
			day=dRequests[key1]
			if key2 in day:
				day[key2].append(m.group(5))
			else:
				day[key2] = [m.group(5)]
		else:
			dRequests[key1] = {key2: [m.group(5)]}

##############################################################################
# Output one day
##############################################################################

def oneDay(ip,title,day):

	pout('''
	<div class="day">
		<div class="dayheader">
		  <a name="%(date)s">Request log for IP %(ip)s for %(date)s</a>
	   </div>
'''%{'date':title,'ip':ip})
	
	for key in sorted(day.keys()):
		oneRequest(key,day[key])
		
	pout('''
	</div>
''')

##############################################################################
# Output one request section
##############################################################################
def oneRequest(title,info):

	pout('''
	<div class="request">
		<h3>%(time)s</h3>
		<pre class="request">
'''%{'time':title})

	for line in info:
		pout("%s\n"%line.replace('&','&amp;'))
		
	pout('''
		</pre>
	</div>
''')

##############################################################################
##############################################################################

##############################################################################
# Start script execution
##############################################################################
if __name__ == "__main__":
	try:
		sys.exit( main() )
	except Exception as e:
		preLoadError("Exception encountered %s"%str(e))
